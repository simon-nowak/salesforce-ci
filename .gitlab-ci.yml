

stages:
 - unit-tests
 - deploy-scratch
 - delete-scratch
 - deploy-sandbox
 - deploy-production

Run Unit Tests:
  stage: unit-tests
  script: ['true']

Deploy Scratch Org:
  stage: deploy-scratch
  only:
    variables:
      - $CI_COMMIT_REF_NAME == 'master'
      - $DEPLOY_SCRATCH_ON_EVERY_COMMIT == 'true'
  script:
    - setup_sfdx
    - if ! check_daily_scratch_orgs $SF_USERNAME; then exit 1; fi

Delete Scratch Org:
  stage: delete-scratch
  only:
    variables:
      - $CI_COMMIT_REF_NAME == 'master'
      - $DEPLOY_SCRATCH_ON_EVERY_COMMIT == 'true'
  when: manual
  allow_failure: false
  script: ['true']


# TODO: test this with tags instead of a branch

Deploy to Sandbox:
  stage: deploy-sandbox
  only:
    variables:
      - $CI_COMMIT_REF_NAME == 'master'
  environment:
    name: sandbox
    url: https://sandbox.$SFDC_BASE_DOMAIN.salesforce.com
  script: ['true']


Deploy to Production:
  stage: deploy-production
  only:
    variables:
      - $CI_COMMIT_REF_NAME == 'master'
  when: manual
  allow_failure: false
  environment:
    name: production
    url: https://$SFDC_BASE_DOMAIN.salesforce.com
  script:
    - setup_sfdx
    - build_package_version
    - install_package_version HubOrg


#
# Create Scratch Org for code testing -- Stage 1
#
.legacy-code-testing:
  stage: code-testing
  except:
    variables:
      - $SCRATCH_ORG_DISABLED
  script:

    # Authenticate to the Dev Hub using the server key
    - sfdx force:auth:jwt:grant --clientid $SF_CONSUMER_KEY --jwtkeyfile server.key --username $SF_USERNAME --setdefaultdevhubusername --setalias HubOrg

    # Create scratch org
    - sfdx force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias $SCRATCH_ORG_ALIAS --wait 10 --durationdays 1
    - sfdx force:org:display --targetusername $SCRATCH_ORG_ALIAS

    # Push source to scratch org (This is with source code, all files, etc)
    - sfdx force:source:push --targetusername $SCRATCH_ORG_ALIAS

    # Assign dreamhouse permission set to scratch org default user
    - sfdx force:user:permset:assign --targetusername $SCRATCH_ORG_ALIAS --permsetname dreamhouse

    # Add sample data into app
    - sfdx force:data:tree:import --plan data/sample-data-plan.json

    # Unit Testing
    - sfdx force:apex:test:run --targetusername $SCRATCH_ORG_ALIAS --wait 10 --resultformat human --codecoverage --testlevel $TESTLEVEL

    # Delete Scratch Org
    - sfdx force:org:delete --targetusername $SCRATCH_ORG_ALIAS --noprompt

#
# Create a Scratch Org, create a package/artifact and push into org for testing
#
.leagcy-integration-testing:
  except:
    variables:
      - $SCRATCH_ORG_DISABLED
  artifacts:
    paths:
      - PACKAGE_VERSION_ID.TXT
      - SCRATCH_ORG_USERNAME.TXT
  stage: integration-testing
  script:

    # Authenticate to the Dev Hub using the server key
    - sfdx force:auth:jwt:grant --clientid $SF_CONSUMER_KEY --jwtkeyfile server.key --username $SF_USERNAME --setdefaultdevhubusername --setalias HubOrg

    ## Create scratch org
    - sfdx force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias $SCRATCH_ORG_ALIAS --wait 10 --durationdays 1
    - sfdx force:org:display --targetusername $SCRATCH_ORG_ALIAS
    ## Create packaged version
    - export PACKAGE_VERSION_ID="$(eval sfdx force:package:version:create --package $PACKAGE_NAME --installationkeybypass --wait 10 --json --targetdevhubusername HubOrg | jq '.result.SubscriberPackageVersionId' | tr -d '"')"
    ## Save your PACKAGE_VERSION_ID to a file for later use during deploy so we know what version to deploy
    - echo "$PACKAGE_VERSION_ID" > PACKAGE_VERSION_ID.TXT

    ## Install package in DevHub org (this is a compiled library of the app)
    - sfdx force:package:list
    - sfdx force:package:install --package $PACKAGE_VERSION_ID --wait 10 --publishwait 10 --targetusername $SCRATCH_ORG_ALIAS --noprompt

    ## Assign dreamhouse permission set to scratch org default user
    - sfdx force:user:permset:assign --targetusername $SCRATCH_ORG_ALIAS --permsetname dreamhouse

    ## Add sample data into app
    - sfdx force:data:tree:import --plan data/sample-data-plan.json

    ## Run unit tests in scratch org
    - sfdx force:apex:test:run --targetusername $SCRATCH_ORG_ALIAS --wait 10 --resultformat human --codecoverage --testlevel $TESTLEVEL

    ## Get the username for the scratch org
    - export SCRATCH_ORG_USERNAME="$(eval sfdx force:user:display --targetusername $SCRATCH_ORG_ALIAS --json | jq -r '.result.username')"
    - echo "$SCRATCH_ORG_USERNAME" > ./SCRATCH_ORG_USERNAME.TXT

    ## Generate a new password for the scrach org
    - sfdx force:user:password:generate
    - echo -e "\n\n\n\n"

    ## Display username, password, and instance URL for login
    - sfdx force:user:display


# Delete the scratch org to keep everything clean

.leagacy-Delete Scratch Org:
  except:
    variables:
      - $SCRATCH_ORG_DISABLED
  stage: app-deploy
  when: manual
  script:
    - sfdx force:auth:jwt:grant --clientid $SF_CONSUMER_KEY --jwtkeyfile server.key --username $SF_USERNAME --setdefaultdevhubusername --setalias HubOrg
    - sfdx force:data:record:delete --sobjecttype ScratchOrgInfo --targetusername HubOrg --where "SignupUsername='`cat ./SCRATCH_ORG_USERNAME.TXT`'"


#
# Promote the package to downstream environment for UAT for example
#
.leagcy-Deploy to Production:
  stage: app-deploy
  when: manual
  only: ['master']
  script:
    - sfdx force:auth:jwt:grant --clientid $SF_CONSUMER_KEY --jwtkeyfile server.key --username $SF_USERNAME --setdefaultdevhubusername --setalias HubOrg
    - sfdx force:package:install --package "`cat PACKAGE_VERSION_ID.TXT`" --wait 10 --publishwait 10 --targetusername HubOrg --noprompt


.sfdx_helpers: &sfdx_helpers |


  # Always call setup_sfdx first

  setup_sfdx () {

    # Decrypt server key
    openssl aes-256-cbc -d -md md5 -in server.key.enc -out server.key -k $SERVER_KEY_PASSWORD

    # Install jq
    apt update && apt -y install jq

    # Setup SFDX environment variables
    export CLIURL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    export SFDX_AUTOUPDATE_DISABLE=false
    export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true
    export SFDX_DOMAIN_RETRY=300
    export SFDX_DISABLE_APP_HUB=true
    export SFDX_LOG_LEVEL=DEBUG
    export ROOTDIR=force-app/main/default/
    export TESTLEVEL=RunLocalTests
    export PACKAGEVERSION=""

    # TODO: Remove this!
    export SCRATCH_ORG_ALIAS=Dreamhouse_Scratch

    # Install Salesforce CLI
    mkdir sfdx
    wget -qO- $CLIURL | tar xJ -C sfdx --strip-components 1
    "./sfdx/install"
    export PATH=./sfdx/$(pwd):$PATH

    # Output CLI version and plug-in information
    sfdx --version
    sfdx plugins --core

    # Authenticate using JWT
    sfdx force:auth:jwt:grant --clientid $SF_CONSUMER_KEY --jwtkeyfile server.key --username $SF_USERNAME --setdefaultdevhubusername --setalias HubOrg
  }


  # Function to check whether there are daily scratch orgs left -- pass targetusername as argument

  check_daily_scratch_orgs () {
    local limits=`sfdx force:limits:api:display -u $1 --json`
    local dso=`jq '.result[] | select(.name == "DailyScratchOrgs")' <<< $limits`
    local dsomax=`jq '.max' <<< $dso`
    local dsorem=`jq '.remaining' <<< $dso`
    if [ $dsorem -le 0 ]; then
      echo "ERROR: Limit of $dsomax Daily Scratch Orgs reached"
    else
      echo "$dsorem of $dsomax Daily Scratch Orgs previously created - OK to proceed"
    fi
    return $(( $dsorem <= 0 ))
  }


  # Function to build a package version

  build_package_version () {
    local output=$(sfdx force:package:version:create --package $PACKAGE_NAME --installationkeybypass --wait 10 --json --targetdevhubusername HubOrg)
    local subscriber_package_version_id=$(jq ".result.SubscriberPackageVersionId" -r <<< $output)
    echo "$subscriber_package_version_id" > SUBSCRIBER_PACKAGE_VERSION_ID.TXT
  }


  # Install a package version -- pass targetusername as argument -- assumes package ID is stored

  install_package_version () {
    sfdx force:package:install --package "`cat SUBSCRIBER_PACKAGE_VERSION_ID.TXT`" --wait 10 --publishwait 10 --targetusername $1 --noprompt
  }


before_script:
  - *sfdx_helpers
